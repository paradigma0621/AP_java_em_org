essa query:  
select * FROM person per 
         LEFT JOIN customer cus ON cus.id = per.customer_id AND cus.id = 18
vai pegar todos resultados onde cus.id = per.customer_id e todos os cud.id possíveis (não apenas os 18). Isso por causa do LEFT JOIN no começo.

Para ter uma persquisa onde serão pegos todos os customer.id = person.customer_id
E com customer.id = 18... deve-se usar:

	select * FROM person AS per 
         INNER JOIN customer AS cus ON cus.id = per.customer_id AND cus.id = 18


         
------------------------------------------
-- Essa roda rápido: (pega os clocking com data inicial 2022-01-10 da person_id 13...
SELECT x.* FROM nexti.clocking x
WHERE person_id = 1359166 AND clocking_date > '2022-01-10'
ORDER BY x.clocking_date

ou
-- mostra os clockings em ordem decrescente
SELECT x.* FROM nexti.clocking x ORDER BY id DESC   
-------------------------------------------------

* Indexes
** tipos
The best way to improve the performance of SELECT operations is to create indexes on one or more of the columns that are tested in the query. The index entries act like pointers to the table rows, allowing the query to quickly determine which rows match a condition in the WHERE clause, and retrieve the other column values for those rows. *All MySQL data types can be indexed.*

** exemplos 
Most MySQL indexes (PRIMARY KEY, UNIQUE, INDEX, and FULLTEXT) are stored in B-trees. (Obs: B-tree não é sinônimo de árvore binária).

